{"version":3,"sources":["components/heroes/hero.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAA8B,eAAe,CAAC,CAAA;AAE9C,QAAO,6BAA6B,CAAC,CAAA;AAGrC,yCAAyC;AAGzC;IAKC,qBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAHtB,cAAS,GAAG,YAAY,CAAC,CAAE,iBAAiB;QAC5C,YAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAEpC,CAAC;IAEnC,+BAAS,GAAT;QACC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;aAClC,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAc,EAA9B,CAA8B,CAAC;aAChD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,6BAAO,GAAP,UAAQ,EAAU;QACjB,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE;aACrB,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,EAAE,KAAK,EAAE,EAAd,CAAc,CAAC,EAAnC,CAAmC,CAAC,CAAC;IACvD,CAAC;IAED,4BAAM,GAAN,UAAO,EAAU;QAChB,IAAM,GAAG,GAAM,IAAI,CAAC,SAAS,SAAI,EAAI,CAAC;QACtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;aACrD,SAAS,EAAE;aACX,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;aAChB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,4BAAM,GAAN,UAAO,IAAY;QAClB,MAAM,CAAC,IAAI,CAAC,IAAI;aACd,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;aAC/E,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,EAAf,CAAe,CAAC;aAC5B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,4BAAM,GAAN,UAAO,IAAU;QAChB,IAAM,GAAG,GAAM,IAAI,CAAC,SAAS,SAAI,IAAI,CAAC,EAAI,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC,IAAI;aACd,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;aACzD,SAAS,EAAE;aACX,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;aAChB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAEO,iCAAW,GAAnB,UAAoB,KAAU;QAC7B,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC,CAAC,yBAAyB;QACpE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAC/C,CAAC;IAhDF;QAAC,iBAAU,EAAE;;mBAAA;IAmEb,kBAAC;AAAD,CAlEA,AAkEC,IAAA;AAlEY,mBAAW,cAkEvB,CAAA","file":"components/heroes/hero.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers, Http } from '@angular/http';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { Hero } from './hero';\r\n//import { HEROES } from './heroes-mock';\r\n\r\n@Injectable()\r\nexport class HeroService {\r\n\r\n\tprivate heroesUrl = 'app/heroes';  // URL to web api\r\n\tprivate headers = new Headers({ 'Content-Type': 'application/json' });\r\n\r\n\tconstructor(private http: Http) { }\r\n\r\n\tgetHeroes(): Promise<Hero[]> {\r\n\t\treturn this.http.get(this.heroesUrl)\r\n\t\t\t.toPromise()\r\n\t\t\t.then(response => response.json().data as Hero[])\r\n\t\t\t.catch(this.handleError);\r\n\t}\r\n\r\n\tgetHero(id: number): Promise<Hero> {\n\t\treturn this.getHeroes()\n\t\t\t.then(heroes => heroes.find(hero => hero.id === id));\n\t}\r\n\r\n\tdelete(id: number): Promise<void> {\n\t\tconst url = `${this.heroesUrl}/${id}`;\n\t\treturn this.http.delete(url, { headers: this.headers })\n\t\t\t.toPromise()\n\t\t\t.then(() => null)\n\t\t\t.catch(this.handleError);\n\t}\n\n\tcreate(name: string): Promise<Hero> {\n\t\treturn this.http\n\t\t\t.post(this.heroesUrl, JSON.stringify({ name: name }), { headers: this.headers })\n\t\t\t.toPromise()\n\t\t\t.then(res => res.json().data)\n\t\t\t.catch(this.handleError);\n\t}\n\n\tupdate(hero: Hero): Promise<Hero> {\n\t\tconst url = `${this.heroesUrl}/${hero.id}`;\n\t\treturn this.http\n\t\t\t.put(url, JSON.stringify(hero), { headers: this.headers })\n\t\t\t.toPromise()\n\t\t\t.then(() => hero)\n\t\t\t.catch(this.handleError);\n\t}\r\n\r\n\tprivate handleError(error: any): Promise<any> {\r\n\t\tconsole.error('An error occurred', error); // for demo purposes only\r\n\t\treturn Promise.reject(error.message || error);\r\n\t}\r\n\r\n\t//getHeroes(): Promise<Hero[]> {\r\n\t//\treturn Promise.resolve(HEROES);\r\n\t//};\r\n\r\n\t//getHero(id: number): Promise<Hero> {\r\n\r\n\t//\treturn this.getHeroes()\r\n\t//\t\t.then(heros => heros.find(hero => hero.id === id));\r\n\t//}\r\n\r\n\t//// See the \"Take it slow\" appendix\r\n\t//getHeroesSlowly(): Promise<Hero[]> {\r\n\t//\treturn new Promise<Hero[]>(resolve =>\r\n\t//\t\tsetTimeout(resolve, 2000)) // delay 2 seconds\r\n\t//\t\t.then(() => this.getHeroes());\r\n\t//}\r\n\r\n}"],"sourceRoot":"/source/"}